import logging
import os
import datetime
import pytz
import threading
import http.server
import socketserver

from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç CallbackQueryHandler
from dotenv import load_dotenv

from config import BOT_TOKEN, GROUP_CHAT_ID # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç GROUP_CHAT_ID
from handlers.start import start, info, rules
# Use the conversation handler for beer tracking
from handlers.beer_tracking import beer_tracking_conv_handler, AWAITING_VOLUME_CHOICE # Import state
from handlers.leaderboard import show_leaderboard # Import the function directly 
from database.database import init_db # Import table creation function from database module
from handlers.achievements import get_achievement_for_volume  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏–π
# leaderboard_handler is now handled by MessageHandler below
from handlers.admin import admin_conv_handler, change_leaderboard_conv_handler, check_submission_conv_handler, import_users_conv_handler

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def prompt_for_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Prompts the user to send a photo when the '–í—ã–ø–∏–ª –ø–∏–≤–æ' button is pressed."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    prompt_message = await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å –ø–∏–≤–æ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ –∑–∞—Å—á–∏—Ç–∞—Ç—å. üì∏"
        "\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª."
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['prompt_message_id'] = prompt_message.message_id
    context.user_data['prompt_chat_id'] = update.message.chat_id
    
    logger.info(f"Stored prompt message details: message_id={prompt_message.message_id}, chat_id={update.message.chat_id}")
    # Note: We don't return a state here, as the photo handler will trigger the conversation.


async def show_leaderboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    chat_id = query.message.chat_id
    user_id = user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
    button_message_id = query.message.message_id if query.message else None
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ handlers/leaderboard.py
        from db_utils import get_db, get_leaderboard
        
        with next(get_db()) as db:
            leaderboard_data = get_leaderboard(db, limit=100) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        if not leaderboard_data:
            leaderboard_text = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üçª"
        else:
            leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –õ–µ—Ç–Ω–∏–π –ø–∏–≤–Ω–æ–π –∫—É–±–æ–∫ 2025 üèÜ\n\n"
            medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
            for i, (first_name, username, volume) in enumerate(leaderboard_data, start=1):
                display_name_parts = []
                if first_name:
                    display_name_parts.append(first_name)
                if username:
                    display_name_parts.append(f"(@{username})")
                
                if not display_name_parts:
                    display_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
                else:
                    display_name = " ".join(display_name_parts)

                medal = medals.get(i, f"{i}.") # Get medal or use number
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–±—ä–µ–º—É –≤—ã–ø–∏—Ç–æ–≥–æ –ø–∏–≤–∞
                achievement = get_achievement_for_volume(volume)
                achievement_text = f" - {achievement['title']} {achievement['icon']}" if achievement else ""
                
                leaderboard_text += f"{medal} {display_name} - {volume:.2f} –ª{achievement_text}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫–∞–∫ reply)
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text=leaderboard_text
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data[f'last_leaderboard_message_id_{user_id}'] = sent_message.message_id
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ)
        # –î–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ª–∏–¥–µ—Ä–æ–≤ –º—ã –Ω–µ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å –µ–≥–æ
        if button_message_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                pinned_message = await context.bot.get_chat(chat_id)
                is_pinned = (
                    pinned_message.pinned_message 
                    and pinned_message.pinned_message.message_id == button_message_id
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if not is_pinned:
                    await context.bot.delete_message(
                        chat_id=chat_id,
                        message_id=button_message_id
                    )
                    logger.info(f"Deleted leaderboard button message {button_message_id} in chat {chat_id}")
            except Exception as e:
                logger.error(f"Error checking pinned status or deleting button message: {e}", exc_info=True)
        
    except Exception as e:
        logger.error(f"Error handling leaderboard button click: {e}", exc_info=True)
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_leaderboard_button_to_group(application: Application) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."""
    if not GROUP_CHAT_ID:
        logger.warning("GROUP_CHAT_ID not set, cannot send leaderboard button")
        return
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    keyboard = [
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ", callback_data="show_leaderboard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        await application.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –õ–µ—Ç–Ω–µ–≥–æ –ø–∏–≤–Ω–æ–≥–æ –∫—É–±–∫–∞ 2025:",
            reply_markup=reply_markup
        )
        logger.info(f"Leaderboard button message sent to group chat: {GROUP_CHAT_ID}")
    except Exception as e:
        logger.error(f"Failed to send leaderboard button to group chat: {e}", exc_info=True)


async def pin_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
            return
    except Exception as e:
        logger.error(f"Error checking admin status: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    keyboard = [
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ", callback_data="show_leaderboard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        message = await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –õ–µ—Ç–Ω–µ–≥–æ –ø–∏–≤–Ω–æ–≥–æ –∫—É–±–∫–∞ 2025:",
            reply_markup=reply_markup
        )
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.pin_chat_message(
            chat_id=chat_id,
            message_id=message.message_id,
            disable_notification=True
        )
        
        logger.info(f"Leaderboard button message sent and pinned to chat {chat_id}")
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=update.message.message_id
            )
        except Exception as delete_error:
            logger.error(f"Failed to delete command message: {delete_error}", exc_info=True)
            
    except Exception as e:
        logger.error(f"Failed to send or pin leaderboard button: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")


async def post_init(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞."""
    bot_commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ"),
        BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ –ø–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞"),
        BotCommand("leaderboard", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"),
        BotCommand("admin", "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand("pin_leaderboard", "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
        BotCommand("announce_winners", "–û–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
        BotCommand("import_users", "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
        BotCommand("change_leaderboard", "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–º –≤—ã–ø–∏—Ç–æ–≥–æ –ø–∏–≤–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
        BotCommand("check_submission", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    await application.bot.set_my_commands(bot_commands)
    
    # –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # await send_leaderboard_button_to_group(application)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: 31 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞ –≤ 21:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    try:
        from handlers.contest_end import announce_contest_winners
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        end_time = moscow_tz.localize(datetime.datetime(2025, 8, 31, 21, 0, 0))
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        end_time_utc = end_time.astimezone(pytz.UTC)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        now = datetime.datetime.now(pytz.UTC)
        seconds_until_end = (end_time_utc - now).total_seconds()
        
        if seconds_until_end > 0:
            application.job_queue.run_once(
                announce_contest_winners,
                when=seconds_until_end
            )
            logger.info(f"Contest end scheduled for {end_time} (Moscow time)")
        else:
            logger.warning("Contest end date is in the past, not scheduling announcement")
    except Exception as e:
        logger.error(f"Error scheduling contest end: {e}", exc_info=True)
    
    logger.info("Bot commands set successfully")


async def announce_winners_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†—É—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
    except Exception as e:
        logger.error(f"Error checking admin status: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await update.message.reply_text(
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞. "
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    from handlers.contest_end import announce_contest_winners
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    await announce_contest_winners(context)
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await context.bot.delete_message(
            chat_id=chat_id,
            message_id=update.message.message_id
        )
    except Exception as delete_error:
        logger.error(f"Failed to delete command message: {delete_error}", exc_info=True)


def start_http_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render.com –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª —Å–µ—Ä–≤–∏—Å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get("PORT", 8080))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    class SimpleHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "Beer Challenge Bot is running! üç∫"
            self.wfile.write(message.encode())
            return
        
        # –ß—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        def log_message(self, format, *args):
            if args[1] != '200':  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫, –Ω–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                return http.server.SimpleHTTPRequestHandler.log_message(self, format, *args)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        httpd = socketserver.TCPServer(("", port), SimpleHandler)
        thread = threading.Thread(target=httpd.serve_forever)
        thread.daemon = True  # –ß—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è –≤–º–µ—Å—Ç–µ —Å –≥–ª–∞–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        thread.start()
        logger.info(f"Started HTTP server on port {port}")
    except Exception as e:
        logger.error(f"Failed to start HTTP server: {e}", exc_info=True)


def main() -> None:
    """Start the bot."""
    # Load environment variables from .env file
    load_dotenv()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
    try:
        from db_backup import create_backup
        if create_backup():
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î: {e}", exc_info=True)

    # Create database tables if they don't exist
    logger.info("Creating database tables if they don't exist...")
    init_db()
    logger.info("Database tables checked/created.")

    # Create the Application and pass it your bot's token.
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é post_init –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    application.post_init = post_init

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /info
    application.add_handler(CommandHandler("info", info))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /rules
    application.add_handler(CommandHandler("rules", rules))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /leaderboard
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    application.add_handler(CommandHandler("pin_leaderboard", pin_leaderboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler("announce_winners", announce_winners_command))

    # Add handlers for the buttons
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–í—ã–ø–∏–ª –ø–∏–≤–æ$'), prompt_for_photo))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤$'), show_leaderboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(show_leaderboard_button, pattern="^show_leaderboard$"))

    # Add the conversation handler for beer tracking (starts with photo)
    application.add_handler(beer_tracking_conv_handler)
    application.add_handler(admin_conv_handler)
    application.add_handler(change_leaderboard_conv_handler)
    application.add_handler(check_submission_conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Render.com
    start_http_server()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(import_users_conv_handler)

    # Run the bot until the user presses Ctrl-C
    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()