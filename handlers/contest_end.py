"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.
"""
import logging
from telegram.ext import ContextTypes
from config import GROUP_CHAT_ID

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def announce_contest_winners(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    if not GROUP_CHAT_ID:
        logger.error("GROUP_CHAT_ID not set, cannot announce winners")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ —Å —Ç—Ä–µ–º—è –ª—É—á—à–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        from db_utils import get_db, get_leaderboard
        
        with next(get_db()) as db:
            top_winners = get_leaderboard(db, limit=3)
        
        if not top_winners:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text="üèÜ Franema Summer Beer Challenge –∑–∞–≤–µ—Ä—à–µ–Ω! üèÜ\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ. –ë—É–¥–µ–º –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–µ—Ç–∞!"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        winners_text = "üéâ Franema Summer Beer Challenge –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ\n\n"
        winners_text += "üèÜ –ù–∞—à–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏: üèÜ\n\n"
        
        medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
        
        for i, (first_name, username, volume) in enumerate(top_winners, start=1):
            display_name_parts = []
            if first_name:
                display_name_parts.append(first_name)
            if username:
                display_name_parts.append(f"(@{username})")
            
            if not display_name_parts:
                display_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
            else:
                display_name = " ".join(display_name_parts)
            
            medal = medals.get(i, f"{i}.")
            winners_text += f"{medal} {display_name} - {volume:.2f} –ª\n"
        
        total_participants = 0
        total_volume = 0.0
        
        with next(get_db()) as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—É—Ä—Å–∞
            try:
                from sqlalchemy import func, distinct
                from models import User, BeerEntry
                
                total_participants = db.query(func.count(distinct(User.id))).scalar() or 0
                total_volume = db.query(func.sum(BeerEntry.volume)).scalar() or 0.0
            except Exception as stats_error:
                logger.error(f"Error getting contest stats: {stats_error}", exc_info=True)
                total_participants = len(top_winners)
                total_volume = sum(winner[2] for winner in top_winners)
        
        winners_text += f"\nüçª –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}"
        winners_text += f"\nüç∫ –û–±—â–∏–π –æ–±—ä–µ–º –≤—ã–ø–∏—Ç–æ–≥–æ –ø–∏–≤–∞: {total_volume:.2f} –ª"
        winners_text += "\n\n–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ! –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–µ—Ç–∞! üåû"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=winners_text
        )
        logger.info("Contest winners announced successfully")
        
    except Exception as e:
        logger.error(f"Error announcing contest winners: {e}", exc_info=True)
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as notify_error:
            logger.error(f"Error sending error notification: {notify_error}", exc_info=True) 